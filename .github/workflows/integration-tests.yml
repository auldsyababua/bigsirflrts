name: Integration Tests - Edge Function & n8n Webhook

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'supabase/functions/**'
      - 'tests/integration/**'
      - '.github/workflows/integration-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'supabase/functions/**'
      - 'tests/integration/**'
  schedule:
    # Run daily at 6 AM UTC to catch infrastructure drift
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  integration-tests:
    name: Edge Function ‚Üí n8n Webhook Integration
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-suite:
          - edge-function-n8n-webhook
          - performance-regression
        include:
          - test-suite: edge-function-n8n-webhook
            test-file: tests/integration/edge-function-n8n-webhook.test.js
            timeout: 60000
          - test-suite: performance-regression
            test-file: tests/integration/performance-regression.test.js
            timeout: 120000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Load test secrets from 1Password
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          SUPABASE_PROJECT_ID: "op://flrts-test-env/supabase-config/project-id"
          SUPABASE_URL: "op://flrts-test-env/supabase-config/url"
          SUPABASE_ANON_KEY: "op://flrts-test-env/supabase-config/anon-key"
          SUPABASE_SERVICE_ROLE_KEY: "op://flrts-test-env/supabase-config/service-role-key"
          N8N_WEBHOOK_URL: "op://flrts-test-env/n8n-config/webhook-url"
          TELEGRAM_BOT_TOKEN: "op://flrts-test-env/telegram-config/bot-token"
          TELEGRAM_WEBHOOK_SECRET: "op://flrts-test-env/telegram-config/webhook-secret"
          TEST_TIMEOUT: "30000"
          NODE_ENV: "test"

      - name: Validate test environment
        run: |
          echo "Validating test environment..."
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "N8N_WEBHOOK_URL: $N8N_WEBHOOK_URL"

          # Test basic connectivity
          curl -f "$SUPABASE_URL/health" || echo "Supabase health check failed"
          curl -f "$N8N_WEBHOOK_URL" || echo "n8n webhook reachable (expected method not allowed)"

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          echo "Running ${{ matrix.test-suite }} integration tests..."
          timeout ${{ matrix.timeout }}ms node --test ${{ matrix.test-file }} || exit 1
        env:
          TEST_TIMEOUT: ${{ matrix.timeout }}

      - name: Webhook health check
        if: always()
        run: |
          echo "Performing final webhook health check..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "$N8N_WEBHOOK_URL")
          echo "n8n webhook health check: HTTP $response"

          if [ "$response" -ge 500 ]; then
            echo "‚ùå n8n webhook returning server errors"
            exit 1
          else
            echo "‚úÖ n8n webhook is responsive"
          fi

      - name: Performance regression check
        if: matrix.test-suite == 'performance-regression'
        run: |
          echo "Checking for performance regressions..."
          # This could integrate with a performance monitoring service
          # For now, we'll just ensure tests passed (indicating <200ms response times)
          echo "‚úÖ Performance regression tests passed - webhooks responding under 200ms"

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()

    steps:
      - name: Notify on failure
        if: needs.integration-tests.result == 'failure'
        run: |
          echo "‚ùå Integration tests failed!"
          echo "The Edge Function ‚Üí n8n webhook integration is broken."
          echo "Check the test results and investigate the 'Reflex + Brain' architecture."

          # In a real setup, this would send alerts to Slack/Teams
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üö® Integration tests failed! Edge Function ‚Üí n8n webhook flow broken."}' \
          #   $SLACK_WEBHOOK_URL

      - name: Notify on success
        if: needs.integration-tests.result == 'success'
        run: |
          echo "‚úÖ All integration tests passed!"
          echo "The 'Reflex + Brain' architecture is working correctly."
          echo "Edge Function ‚Üí n8n webhook flow is operational and performant."