name: Security Review

on:
  pull_request:
    branches: [main, develop]
    paths:
      - '**.ts'
      - '**.js'
      - '**.tsx'
      - '**.jsx'
      - 'package.json'
      - 'package-lock.json'
      - '.security-ignore'
      - 'scripts/security-review.sh'
  push:
    branches: [main]
    paths:
      - '**.ts'
      - '**.js'
      - '**.tsx'
      - '**.jsx'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch: # Allow manual trigger

jobs:
  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # For commenting on PRs
      security-events: write # For uploading SARIF

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for git diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install jq (for npm audit parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run Security Review Script
        id: security-review
        run: |
          echo "Running security review..."
          set -o pipefail
          bash scripts/security-review.sh 2>&1 | tee security-review.log
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Parse Security Findings
        if: always()
        id: parse-findings
        run: |
          # Parse structured JSON output from security script
          JSON_FILE="security-findings.json"

          if [ -f "$JSON_FILE" ]; then
            CRITICAL=$(jq -r '.summary.critical' "$JSON_FILE")
            HIGH=$(jq -r '.summary.high' "$JSON_FILE")
            MEDIUM=$(jq -r '.summary.medium' "$JSON_FILE")
            LOW=$(jq -r '.summary.low' "$JSON_FILE")
            TOTAL=$(jq -r '.summary.total' "$JSON_FILE")
          else
            # If JSON not found, assume no findings (script may have exited early)
            echo "‚ö†Ô∏è JSON output not found, assuming no findings"
            CRITICAL=0
            HIGH=0
            MEDIUM=0
            LOW=0
            TOTAL=0
          fi

          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
          echo "low=$LOW" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const critical = '${{ steps.parse-findings.outputs.critical }}';
            const high = '${{ steps.parse-findings.outputs.high }}';
            const medium = '${{ steps.parse-findings.outputs.medium }}';
            const low = '${{ steps.parse-findings.outputs.low }}';
            const total = '${{ steps.parse-findings.outputs.total }}';
            const exitCode = '${{ steps.security-review.outputs.exit_code }}';

            // Read and redact potential secrets from log before embedding in PR comment
            const rawLog = fs.readFileSync('security-review.log', 'utf8');
            const redactedLog = rawLog
              .replace(/(api[_-]?key\s*[=:]\s*['"])[^'"]+/gi, '$1***REDACTED***')
              .replace(/(token\s*[=:]\s*['"])[^'"]+/gi, '$1***REDACTED***')
              .replace(/(password\s*[=:]\s*['"])[^'"]+/gi, '$1***REDACTED***')
              .replace(/(secret\s*[=:]\s*['"])[^'"]+/gi, '$1***REDACTED***')
              .replace(/(Bearer\s+)[A-Za-z0-9\-\._~\+\/]+/g, '$1***REDACTED***')
              .replace(/[A-Za-z0-9_\-]{20,}\.[A-Za-z0-9_\-]{10,}\.[A-Za-z0-9_\-]{10,}/g, '***REDACTED_JWT***')
              .slice(0, 60000);

            let status = '‚úÖ **Security Review Passed**';
            let emoji = 'üîí';

            if (exitCode !== '0') {
              status = '‚ùå **Security Review Failed**';
              emoji = 'üö®';
            } else if (total > 0) {
              status = '‚ö†Ô∏è **Security Review Passed with Warnings**';
              emoji = '‚ö†Ô∏è';
            }

            const body = `## ${emoji} Security Review Results

            ${status}

            ### Findings Summary

            | Severity | Count |
            |----------|-------|
            | üö® Critical | ${critical} |
            | ‚ùó High | ${high} |
            | ‚ö†Ô∏è Medium | ${medium} |
            | ‚ÑπÔ∏è Low | ${low} |
            | **Total** | **${total}** |

            ${exitCode !== '0' ? '### ‚ùå Action Required\n\nCritical or High severity issues detected. Please fix these issues before merging.\n\n**Options:**\n1. Fix the issues and push again\n2. Add `// SECURITY-REVIEWED: [reason]` if false positive\n3. Update `.security-ignore` for systematic exceptions\n\n' : ''}
            ${total > 0 && exitCode === '0' ? '### ‚ö†Ô∏è Warnings\n\nMedium/Low severity issues detected. Please review and address when possible.\n\n' : ''}
            <details>
            <summary>View Full Security Review Log</summary>

            \`\`\`
            ${ redactedLog }
            \`\`\`
            
            </details>
            
            ---
            
            üìö **Resources:**
            - [Security Review Documentation](../blob/main/docs/security/SECURITY-REVIEW.md)
            - [OWASP Top 10](https://owasp.org/www-project-top-ten/)
            - [Coding Standards](../blob/main/docs/architecture/coding-standards.md)
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Security Review Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Upload Security Review Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-review-results
          path: |
            security-review.log
            security-findings.json
          retention-days: 30

      - name: Fail if Critical/High Issues Found
        if: steps.security-review.outputs.exit_code != '0'
        run: |
          echo "‚ùå Security review failed with critical or high severity issues"
          echo "Please review the findings and fix before merging"
          exit 1

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true

