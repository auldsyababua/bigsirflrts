#!/bin/bash

# Wrangler Setup Script for Agents
# This script configures Wrangler to work with the ops.10nz.tools Cloudflare configuration

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}==================================${NC}"
echo -e "${BLUE}Wrangler Configuration for Agents${NC}"
echo -e "${BLUE}==================================${NC}"

# Configuration paths
PROJECT_DIR="/Users/colinaulds/Desktop/projects/bigsirflrts"
ENV_FILE="$PROJECT_DIR/.env"
MCP_ENV_FILE="$HOME/.config/mcp/.env"

# Function to get Cloudflare credentials from 1Password
get_cloudflare_creds() {
    echo -e "${YELLOW}Retrieving Cloudflare credentials from 1Password...${NC}"

    # Source the MCP environment for 1Password access
    if [ -f "$MCP_ENV_FILE" ]; then
        source "$MCP_ENV_FILE"
    else
        echo -e "${RED}Error: MCP environment file not found at $MCP_ENV_FILE${NC}"
        exit 1
    fi

    # Get the API token
    export CLOUDFLARE_API_TOKEN=$(op read "op://MCP Secrets/kiuuky5sklppnrwqqtjuefjvea/API-TOKEN" 2>/dev/null || echo "")

    if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
        echo -e "${RED}Error: Could not retrieve Cloudflare API token from 1Password${NC}"
        echo "Make sure you have access to the MCP Secrets vault"
        exit 1
    fi

    # Get the account ID from the API token
    echo -e "${GREEN}✓ Cloudflare API token retrieved${NC}"
}

# Function to get Cloudflare account and zone info
get_cloudflare_info() {
    echo -e "${YELLOW}Fetching Cloudflare account and zone information...${NC}"

    # Get account ID
    ACCOUNT_INFO=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts" \
        -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
        -H "Content-Type: application/json")

    ACCOUNT_ID=$(echo "$ACCOUNT_INFO" | jq -r '.result[0].id' 2>/dev/null)

    if [ -z "$ACCOUNT_ID" ] || [ "$ACCOUNT_ID" = "null" ]; then
        echo -e "${RED}Error: Could not fetch Cloudflare account ID${NC}"
        exit 1
    fi

    echo -e "${GREEN}✓ Account ID: $ACCOUNT_ID${NC}"

    # Get zone ID for 10nz.tools
    ZONE_INFO=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=10nz.tools" \
        -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
        -H "Content-Type: application/json")

    ZONE_ID=$(echo "$ZONE_INFO" | jq -r '.result[0].id' 2>/dev/null)

    if [ -z "$ZONE_ID" ] || [ "$ZONE_ID" = "null" ]; then
        echo -e "${RED}Error: Could not fetch zone ID for 10nz.tools${NC}"
        exit 1
    fi

    echo -e "${GREEN}✓ Zone ID: $ZONE_ID${NC}"
}

# Function to create/update environment file
create_env_file() {
    echo -e "${YELLOW}Creating environment configuration...${NC}"

    cat > "$ENV_FILE" << EOF
# Cloudflare Configuration for Wrangler
# Generated by wrangler-setup.sh

# API Authentication
CLOUDFLARE_API_TOKEN="$CLOUDFLARE_API_TOKEN"
CLOUDFLARE_ACCOUNT_ID="$ACCOUNT_ID"
CLOUDFLARE_ZONE_ID="$ZONE_ID"

# Zone Information
CF_ZONE_NAME="10nz.tools"
CF_SUBDOMAIN="ops"

# OpenProject Configuration
OPENPROJECT_URL="https://ops.10nz.tools"
OPENPROJECT_VM_IP="165.227.216.172"

# Tunnel Configuration (if needed)
# CLOUDFLARED_TUNNEL_TOKEN will be retrieved when needed
EOF

    echo -e "${GREEN}✓ Environment file created at $ENV_FILE${NC}"
}

# Function to test Wrangler configuration
test_wrangler() {
    echo -e "${YELLOW}Testing Wrangler configuration...${NC}"

    cd "$PROJECT_DIR"

    # Test authentication
    echo -e "${BLUE}Testing authentication...${NC}"
    if wrangler whoami 2>/dev/null; then
        echo -e "${GREEN}✓ Authentication successful${NC}"
    else
        echo -e "${RED}✗ Authentication failed${NC}"
        return 1
    fi

    # List zones
    echo -e "${BLUE}Listing zones...${NC}"
    if wrangler zones list 2>/dev/null | grep -q "10nz.tools"; then
        echo -e "${GREEN}✓ Can access 10nz.tools zone${NC}"
    else
        echo -e "${YELLOW}⚠ Could not verify zone access${NC}"
    fi

    return 0
}

# Function to create helper commands
create_helpers() {
    echo -e "${YELLOW}Creating helper commands...${NC}"

    # Create wrangler wrapper
    cat > "$PROJECT_DIR/scripts/cf-wrangler" << 'EOF'
#!/bin/bash
# Wrapper script for Wrangler with automatic authentication

PROJECT_DIR="/Users/colinaulds/Desktop/projects/bigsirflrts"
source "$PROJECT_DIR/.env" 2>/dev/null

if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
    echo "Error: Cloudflare API token not found. Run wrangler-setup.sh first"
    exit 1
fi

export CLOUDFLARE_API_TOKEN
export CLOUDFLARE_ACCOUNT_ID
export CLOUDFLARE_ZONE_ID

cd "$PROJECT_DIR"
wrangler "$@"
EOF

    chmod +x "$PROJECT_DIR/scripts/cf-wrangler"

    # Create DNS check script
    cat > "$PROJECT_DIR/scripts/check-cf-dns" << 'EOF'
#!/bin/bash
# Check Cloudflare DNS and redirect settings for ops.10nz.tools

source "$PROJECT_DIR/.env" 2>/dev/null

echo "Checking Cloudflare DNS and settings for ops.10nz.tools..."

# Check DNS records
curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?name=ops.10nz.tools" \
    -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
    -H "Content-Type: application/json" | jq '.result[] | {type, name, content, proxied}'

# Check page rules
echo -e "\nChecking page rules..."
curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/pagerules" \
    -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
    -H "Content-Type: application/json" | jq '.result[] | select(.targets[].constraint.value | contains("ops.10nz.tools"))'

# Check SSL settings
echo -e "\nChecking SSL settings..."
curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/settings/ssl" \
    -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
    -H "Content-Type: application/json" | jq '.result.value'
EOF

    chmod +x "$PROJECT_DIR/scripts/check-cf-dns"

    echo -e "${GREEN}✓ Helper scripts created${NC}"
}

# Main execution
main() {
    echo -e "${BLUE}Starting Wrangler setup...${NC}\n"

    # Step 1: Get credentials
    get_cloudflare_creds

    # Step 2: Get account/zone info
    get_cloudflare_info

    # Step 3: Create environment file
    create_env_file

    # Step 4: Test configuration
    if test_wrangler; then
        echo -e "${GREEN}✓ Wrangler configuration successful${NC}"
    else
        echo -e "${YELLOW}⚠ Wrangler test had issues, but configuration is saved${NC}"
    fi

    # Step 5: Create helpers
    create_helpers

    echo -e "\n${GREEN}==================================${NC}"
    echo -e "${GREEN}Setup Complete!${NC}"
    echo -e "${GREEN}==================================${NC}"
    echo -e "\nUsage:"
    echo -e "  ${BLUE}Source environment:${NC} source $ENV_FILE"
    echo -e "  ${BLUE}Use wrapper:${NC} ./scripts/cf-wrangler <command>"
    echo -e "  ${BLUE}Check DNS:${NC} ./scripts/check-cf-dns"
    echo -e "\nExample commands:"
    echo -e "  ${BLUE}cf-wrangler whoami${NC} - Check authentication"
    echo -e "  ${BLUE}cf-wrangler zones list${NC} - List zones"
    echo -e "  ${BLUE}cf-wrangler pages project list${NC} - List Pages projects"
}

# Run main function
main "$@"