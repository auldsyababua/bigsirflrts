{
  "module": "infrastructure",
  "timestamp": "${ISO_TIMESTAMP}",
  "statistics": {
    "composeFilesAnalyzed": 7,
    "workflowsAnalyzed": 6,
    "servicesDiscovered": 16,
    "networksDiscovered": 3,
    "exposedPorts": [
      { "service": "openproject", "port": "8080:80", "scope": "root" },
      { "service": "flrts-nlp", "port": "3000:3000", "scope": "root" },
      { "service": "n8n", "port": "5678:5678", "scope": "root-optional" },
      { "service": "prometheus", "port": "9090:9090", "scope": "local" },
      { "service": "grafana", "port": "3000:3000", "scope": "local" },
      { "service": "jaeger", "port": "16686,14250,4317,4318", "scope": "local" },
      { "service": "node-exporter", "port": "9100:9100", "scope": "local" },
      { "service": "cadvisor", "port": "8080:8080", "scope": "local" },
      { "service": "openproject", "port": "127.0.0.1:8080:80", "scope": "prod" },
      { "service": "uptime-kuma", "port": "127.0.0.1:3001:3001", "scope": "prod" },
      { "service": "prometheus", "port": "127.0.0.1:9090", "scope": "prod-monitoring" },
      { "service": "grafana", "port": "127.0.0.1:3000", "scope": "prod-monitoring" },
      {
        "service": "jaeger",
        "port": "127.0.0.1:16686,14250; 4317,4318",
        "scope": "prod-monitoring"
      },
      { "service": "n8n-monitor", "port": "127.0.0.1:3002:3002", "scope": "prod-monitoring" }
    ]
  },
  "connections": [
    { "from": "openproject", "to": "memcached", "protocol": "TCP", "authenticated": false },
    {
      "from": "openproject",
      "to": "Supabase/Postgres or openproject-db",
      "protocol": "PostgreSQL",
      "authenticated": true
    },
    {
      "from": "openproject",
      "to": "Cloudflare R2 (S3)",
      "protocol": "HTTP",
      "authenticated": true
    },
    { "from": "flrts-nlp", "to": "OpenProject API", "protocol": "HTTP", "authenticated": true },
    { "from": "flrts-nlp", "to": "OpenAI API", "protocol": "HTTPS", "authenticated": true },
    {
      "from": "flrts-nlp",
      "to": "Supabase/Postgres",
      "protocol": "PostgreSQL",
      "authenticated": true
    },
    { "from": "n8n", "to": "Supabase/Postgres", "protocol": "PostgreSQL", "authenticated": true },
    { "from": "cloudflared", "to": "openproject", "protocol": "HTTPS", "authenticated": true }
  ],
  "ciCdFindings": {
    "workflows": [
      {
        "name": "BMAD QA Gate (Fast)",
        "secrets": [
          "SUPABASE_PROJECT_ID",
          "SUPABASE_URL",
          "SUPABASE_ANON_KEY",
          "SUPABASE_SERVICE_ROLE_KEY"
        ],
        "notes": "Uses GitHub Encrypted Secrets; installs Playwright with deps"
      },
      {
        "name": "BMAD QA Gate",
        "secrets": [
          "SUPABASE_PROJECT_ID",
          "SUPABASE_URL",
          "SUPABASE_ANON_KEY",
          "SUPABASE_SERVICE_ROLE_KEY"
        ],
        "notes": "Uses GitHub Encrypted Secrets"
      },
      {
        "name": "Integration Tests",
        "secretsSource": "1Password load-secrets-action",
        "notes": "Secrets loaded at runtime via OP service account"
      },
      { "name": "Linear PR Automation", "secrets": ["GITHUB_TOKEN", "LINEAR_API_KEY"] },
      {
        "name": "Linear Sync",
        "secrets": ["LINEAR_API_KEY", "LINEAR_TEAM_ID", "LINEAR_PROJECT_ID", "GITHUB_TOKEN"]
      },
      { "name": "MVP P0 Tests (Manual)", "secrets": ["SLACK_WEBHOOK_URL"] }
    ],
    "securityPosture": {
      "plaintextSecretsInRepo": false,
      "secretsManagersUsed": ["GitHub Secrets", "1Password"],
      "notes": "No plaintext secrets in workflows; good practice using 1Password and GitHub secrets."
    }
  },
  "issues": [
    {
      "severity": "CRITICAL",
      "title": "Hardcoded Supabase credentials in production compose (DO Supabase variant)",
      "location": "infrastructure/digitalocean/docker-compose.supabase.yml:13,25",
      "description": "DATABASE_URL contains hardcoded username/password and hostname for Supabase.",
      "remediation": "Replace with environment variables or Docker secrets; store securely (GitHub Secrets / 1Password)."
    },
    {
      "severity": "HIGH",
      "title": "Default SECRET_KEY_BASE and admin password present",
      "location": "infrastructure/digitalocean/docker-compose.supabase.yml:14,30,53",
      "description": "SECRET_KEY_BASE uses a default value; OPENPROJECT_ADMIN_PASSWORD defaults to a known string.",
      "remediation": "Remove defaults and require injection via secrets; consider Docker secrets or env vars from a secret manager."
    },
    {
      "severity": "MEDIUM",
      "title": "Service reference without defined container",
      "location": "docker-compose.yml:96-99",
      "description": "TELEGRAM_BOT_URL points to http://telegram-bot:3001 but no telegram-bot service is defined in this compose file.",
      "remediation": "Add the telegram-bot service or make the URL configurable to an external deployment; update service discovery docs."
    },
    {
      "severity": "LOW",
      "title": "Open ports on all interfaces in local/dev stacks",
      "location": "docker-compose.yml and infrastructure/docker/*.yml",
      "description": "Local stacks expose services on 0.0.0.0 which is acceptable for dev but must not be used in prod.",
      "remediation": "Ensure production ports bind to 127.0.0.1 or are behind Cloudflare Tunnel/reverse proxy; verify current prod configs already enforce this."
    }
  ],
  "recommendations": {
    "immediate": [
      "Remove hardcoded secrets from infrastructure/digitalocean/docker-compose.supabase.yml and replace with env vars or Docker secrets.",
      "Eliminate default SECRET_KEY_BASE and admin password; require injection from secret manager.",
      "Confirm deployment strategy for Telegram bot or remove stale TELEGRAM_BOT_URL reference."
    ],
    "shortTerm": [
      "Adopt Docker secrets for highly sensitive values (DB credentials, SECRET_KEY_BASE).",
      "Add a pre-commit or CI check to block commits containing DATABASE_URL or API keys (ripgrep patterns).",
      "Add an automated check to enforce localhost-only binds in production compose files."
    ],
    "longTerm": [
      "Generate connection maps automatically in CI and publish as artifacts.",
      "Adopt a standardized env/secrets management policy across all services (documentation + examples)."
    ]
  }
}
