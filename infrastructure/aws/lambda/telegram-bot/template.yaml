AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Telegram Bot Lambda Functions with OpenAI NLP and ERPNext integration (Pure Lambda MVP)

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name for resource tagging and configuration

  TelegramBotToken:
    Type: String
    NoEcho: true
    Description: Telegram Bot API token (obtained from @BotFather)

  TelegramWebhookSecret:
    Type: String
    NoEcho: true
    Description: Telegram webhook secret token used to validate incoming requests

  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API key for Chat Completions API

  ERPNextApiKey:
    Type: String
    NoEcho: true
    Description: ERPNext API key for authentication

  ERPNextApiSecret:
    Type: String
    NoEcho: true
    Description: ERPNext API secret for authentication

  ERPNextBaseUrl:
    Type: String
    Default: https://ops.10nz.tools
    Description: ERPNext instance base URL (no trailing slash)

  ADOTLayerArn:
    Type: String
    Default: arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-30-0:1
    Description: ARN of ADOT Lambda Layer (default is for us-east-1; update for other regions)

  AlertEmail:
    Type: String
    Default: dev-team@10nz.tools
    Description: Email address to receive CloudWatch alarm notifications

Globals:
  Function:
    Runtime: nodejs22.x
    MemorySize: 1024
    Architectures:
      - x86_64
    Tracing: Active
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
        OPENAI_API_KEY: !Ref OpenAIApiKey
        TELEGRAM_WEBHOOK_SECRET: !Ref TelegramWebhookSecret
        ERPNEXT_API_KEY: !Ref ERPNextApiKey
        ERPNEXT_API_SECRET: !Ref ERPNextApiSecret
        ERPNEXT_BASE_URL: !Ref ERPNextBaseUrl

    Tags:
      Project: BigSirFLRTS
      Component: TelegramBot
      Environment: !Ref Environment

Resources:
  # Pure Lambda MVP architecture: No DynamoDB table required (tasks created immediately in ERPNext)

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub telegram-bot-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      # No DynamoDB permissions needed - webhook handler only makes HTTPS calls to external APIs
      Tags:
        - Key: Project
          Value: BigSirFLRTS
        - Key: Component
          Value: TelegramBot
        - Key: Environment
          Value: !Ref Environment

  # Webhook Handler Lambda Function (Pure Lambda MVP)
  WebhookHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub telegram-webhook-handler-${Environment}
      Handler: index.handler
      CodeUri: webhook_handler/
      Description: Telegram webhook handler with OpenAI NLP and ERPNext integration (pure Lambda MVP)
      MemorySize: 512
      Timeout: 15
      Role: !GetAtt LambdaExecutionRole.Arn
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Layers:
        - !Ref ADOTLayerArn
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OTEL_SERVICE_NAME: telegram-webhook-handler
          OTEL_RESOURCE_ATTRIBUTES: !Sub service.namespace=BigSirFLRTS,deployment.environment=${Environment}
          OTEL_TRACES_SAMPLER: parentbased_always_on
          OTEL_PROPAGATORS: xray
      Tags:
        Name: !Sub telegram-webhook-handler-${Environment}

  # Webhook Handler Function URL (on alias to use PC)
  WebhookHandlerFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !Ref WebhookHandlerFunctionAliaslive
      InvokeMode: BUFFERED

  # Webhook Handler Function URL Permission
  WebhookHandlerUrlPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebhookHandlerFunctionAliaslive
      - WebhookHandlerFunctionUrl
    Properties:
      FunctionName: !Ref WebhookHandlerFunctionAliaslive
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  # Pure Lambda MVP: Single webhook handler creates tasks directly in ERPNext (no approval workflow)

  # CloudWatch Log Groups (explicit retention)
  WebhookHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/telegram-webhook-handler-${Environment}
      RetentionInDays: 30

  # Pure Lambda MVP uses single handler - no separate approval function or log group

  # SNS Topic for Alarm Notifications
  AlertNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub telegram-bot-alerts-${Environment}
      DisplayName: Telegram Bot Alerts

  # SNS Email Subscription
  AlertEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertNotificationTopic
      Protocol: email
      Endpoint: !Ref AlertEmail

  # CloudWatch Logs Metric Filter for OpenAI Quota Exceeded
  OpenAIQuotaExceededMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref WebhookHandlerLogGroup
      FilterPattern: '{ $.event = "openai_quota_exceeded" }'
      MetricTransformations:
        - MetricName: OpenAIQuotaExceeded
          MetricNamespace: BigSirFLRTS/TelegramBot
          MetricValue: "1"

  # CloudWatch Alarms for Monitoring
  WebhookHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub telegram-webhook-handler-errors-${Environment}
      AlarmDescription: Alert when webhook handler experiences errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref WebhookHandlerFunction
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertNotificationTopic

  ProvisionedConcurrencySpilloverAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub telegram-webhook-pc-spillover-${Environment}
      AlarmDescription: Alert when provisioned concurrency is exhausted (spillover to on-demand)
      MetricName: ProvisionedConcurrencySpilloverInvocations
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref WebhookHandlerFunction
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertNotificationTopic

  WebhookHandlerTimeoutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub telegram-webhook-handler-timeout-${Environment}
      AlarmDescription: Alert when webhook handler approaches timeout (>14 seconds duration)
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 14000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref WebhookHandlerFunction
      TreatMissingData: notBreaching
      Unit: Milliseconds
      AlarmActions:
        - !Ref AlertNotificationTopic

  WebhookHandlerThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub telegram-webhook-handler-throttles-${Environment}
      AlarmDescription: Alert when webhook handler is throttled (concurrent execution limit reached)
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref WebhookHandlerFunction
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertNotificationTopic

  OpenAIQuotaExceededAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub telegram-webhook-openai-quota-${Environment}
      AlarmDescription: Alert when OpenAI quota is exceeded
      MetricName: OpenAIQuotaExceeded
      Namespace: BigSirFLRTS/TelegramBot
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertNotificationTopic

Outputs:
  WebhookHandlerFunctionUrl:
    Description: Function URL for Telegram webhook handler with Provisioned Concurrency (PC=1)
    Value: !GetAtt WebhookHandlerFunctionUrl.FunctionUrl
    Export:
      Name: !Sub ${AWS::StackName}-WebhookHandlerUrl

  # Pure Lambda MVP architecture: Outputs only include webhook handler resources

  LambdaExecutionRoleArn:
    Description: IAM role ARN for Lambda functions
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutionRoleArn

  WebhookHandlerFunctionArn:
    Description: ARN of webhook handler Lambda function
    Value: !GetAtt WebhookHandlerFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-WebhookHandlerArn
